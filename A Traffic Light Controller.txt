//A Traffic Light Controller//code`timescale 1ns/1psmodule traffic_light (input clk,input reset,output reg [2:0] light // {Red, Yellow, Green});    // State encoding    parameter S0 = 2'b00; // Green    parameter S1 = 2'b01; // Yellow    parameter S2 = 2'b10; // Red    reg [1:0] current_state, next_state;    integer counter;    // Parameters for timing (adjust cycles as needed)    parameter GREEN_TIME = 5;    parameter YELLOW_TIME = 2;    parameter RED_TIME = 5;    // Sequential: state & counter update    always @(posedge clk or posedge reset) begin        if (reset) begin            current_state <= S0;            counter <= GREEN_TIME;        end else begin            if (counter == 0) begin                current_state <= next_state;                case (next_state)                    S0: counter <= GREEN_TIME;                    S1: counter <= YELLOW_TIME;                    S2: counter <= RED_TIME;                    default: counter <= GREEN_TIME;                endcase            end else begin                counter <= counter - 1;            end        end    end    // Combinational: next state logic    always @(*) begin        case (current_state)            S0: next_state = (counter == 0) ? S1 : S0;            S1: next_state = (counter == 0) ? S2 : S1;            S2: next_state = (counter == 0) ? S0 : S2;            default: next_state = S0;        endcase    end    // Output logic    always @(*) begin        case (current_state)            S0: light = 3'b001; // Green            S1: light = 3'b010; // Yellow            S2: light = 3'b100; // Red            default: light = 3'b001;        endcase    endendmodule//testbench`timescale 1ns/1psmodule tb_traffic_light;reg clk, reset;wire [2:0] light;    // Instantiate DUT    traffic_light uut (        .clk(clk),        .reset(reset),        .light(light)    );    // Clock generation    initial begin        clk = 0;        forever #5 clk = ~clk; // 10ns period    end    // Test sequence    initial begin        // VCD dump for EPWave        $dumpfile("dump.vcd");        $dumpvars(0, tb_traffic_light);        reset = 1;        #10 reset = 0;        // Run simulation long enough to cycle through states        #200 $finish;    end    // Monitor outputs    initial begin        $monitor("Time=%0t | Red=%b Yellow=%b Green=%b",                   $time, light[2], light[1], light[0]);    endendmodule